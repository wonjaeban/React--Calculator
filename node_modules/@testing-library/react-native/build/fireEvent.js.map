{"version":3,"sources":["../src/fireEvent.ts"],"names":["isHostElement","element","type","isTextInput","TextInput","require","isTouchResponder","props","onStartShouldSetResponder","isPointerEventEnabled","isParent","parentCondition","pointerEvents","parent","isEventEnabled","touchResponder","editable","touchStart","touchMove","onMoveShouldSetResponder","undefined","findEventHandler","eventName","callsite","nearestTouchResponder","handler","getEventHandler","eventHandlerName","toEventHandlerName","invokeEvent","data","returnValue","charAt","toUpperCase","slice","pressHandler","changeTextHandler","scrollHandler","fireEvent","press","changeText","scroll"],"mappings":"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","sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport act from './act';\n\ntype EventHandler = (...args: any) => unknown;\n\nconst isHostElement = (element?: ReactTestInstance) => {\n  return typeof element?.type === 'string';\n};\n\nconst isTextInput = (element?: ReactTestInstance) => {\n  const { TextInput } = require('react-native');\n  return element?.type === TextInput;\n};\n\nconst isTouchResponder = (element?: ReactTestInstance) => {\n  if (!isHostElement(element)) return false;\n\n  return !!element?.props.onStartShouldSetResponder || isTextInput(element);\n};\n\nconst isPointerEventEnabled = (\n  element?: ReactTestInstance,\n  isParent?: boolean\n): boolean => {\n  const parentCondition = isParent\n    ? element?.props.pointerEvents === 'box-only'\n    : element?.props.pointerEvents === 'box-none';\n\n  if (element?.props.pointerEvents === 'none' || parentCondition) {\n    return false;\n  }\n\n  if (!element?.parent) return true;\n\n  return isPointerEventEnabled(element.parent, true);\n};\n\nconst isEventEnabled = (\n  element?: ReactTestInstance,\n  touchResponder?: ReactTestInstance\n) => {\n  if (isTextInput(element)) return element?.props.editable !== false;\n  if (!isPointerEventEnabled(element)) return false;\n\n  const touchStart = touchResponder?.props.onStartShouldSetResponder?.();\n  const touchMove = touchResponder?.props.onMoveShouldSetResponder?.();\n\n  if (touchStart || touchMove) return true;\n\n  return touchStart === undefined && touchMove === undefined;\n};\n\nconst findEventHandler = (\n  element: ReactTestInstance,\n  eventName: string,\n  callsite?: any,\n  nearestTouchResponder?: ReactTestInstance\n): EventHandler | null => {\n  const touchResponder = isTouchResponder(element)\n    ? element\n    : nearestTouchResponder;\n\n  const handler = getEventHandler(element, eventName);\n  if (handler && isEventEnabled(element, touchResponder)) return handler;\n\n  if (element.parent === null || element.parent.parent === null) {\n    return null;\n  }\n\n  return findEventHandler(element.parent, eventName, callsite, touchResponder);\n};\n\nconst getEventHandler = (\n  element: ReactTestInstance,\n  eventName: string\n): EventHandler | undefined => {\n  const eventHandlerName = toEventHandlerName(eventName);\n  if (typeof element.props[eventHandlerName] === 'function') {\n    return element.props[eventHandlerName];\n  }\n\n  if (typeof element.props[eventName] === 'function') {\n    return element.props[eventName];\n  }\n\n  return undefined;\n};\n\nconst invokeEvent = (\n  element: ReactTestInstance,\n  eventName: string,\n  callsite?: any,\n  ...data: Array<any>\n) => {\n  const handler = findEventHandler(element, eventName, callsite);\n\n  if (!handler) {\n    return;\n  }\n\n  let returnValue;\n\n  act(() => {\n    returnValue = handler(...data);\n  });\n\n  return returnValue;\n};\n\nconst toEventHandlerName = (eventName: string) =>\n  `on${eventName.charAt(0).toUpperCase()}${eventName.slice(1)}`;\n\nconst pressHandler = (element: ReactTestInstance, ...data: Array<any>): void =>\n  invokeEvent(element, 'press', pressHandler, ...data);\nconst changeTextHandler = (\n  element: ReactTestInstance,\n  ...data: Array<any>\n): void => invokeEvent(element, 'changeText', changeTextHandler, ...data);\nconst scrollHandler = (element: ReactTestInstance, ...data: Array<any>): void =>\n  invokeEvent(element, 'scroll', scrollHandler, ...data);\n\nconst fireEvent = (\n  element: ReactTestInstance,\n  eventName: string,\n  ...data: Array<any>\n): void => invokeEvent(element, eventName, fireEvent, ...data);\n\nfireEvent.press = pressHandler;\nfireEvent.changeText = changeTextHandler;\nfireEvent.scroll = scrollHandler;\n\nexport default fireEvent;\n"],"file":"fireEvent.js"}