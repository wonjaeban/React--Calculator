{"version":3,"sources":["../../src/helpers/errors.ts"],"names":["ErrorWithStack","Error","constructor","message","callsite","captureStackTrace","createLibraryNotSupportedError","error","prepareErrorMessage","name","value","errorMessage","replace","toString","min","createQueryByError","includes","copyStackTrace","target","stackTraceSource","stack","warned","printDeprecationWarning","functionName","console","warn","throwRemovedFunctionError","docsRef","throwRenamedFunctionError","newFunctionName"],"mappings":"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","sourcesContent":["import prettyFormat from 'pretty-format';\n\nexport class ErrorWithStack extends Error {\n  constructor(message: string | undefined, callsite: Function) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, callsite);\n    }\n  }\n}\n\nexport const createLibraryNotSupportedError = (error: unknown): Error =>\n  new Error(\n    `Currently the only supported library to search by text is \"react-native\".\\n\\n${\n      error instanceof Error ? error.message : ''\n    }`\n  );\n\nexport const prepareErrorMessage = (\n  // TS states that error caught in a catch close are of type `unknown`\n  // most real cases will be `Error`, but better safe than sorry\n  error: unknown,\n  name?: string,\n  value?: unknown\n): string => {\n  let errorMessage: string;\n  if (error instanceof Error) {\n    // Strip info about custom predicate\n    errorMessage = error.message.replace(\n      / matching custom predicate[^]*/gm,\n      ''\n    );\n  } else if (error && typeof error === 'object') {\n    errorMessage = error.toString();\n  } else {\n    errorMessage = 'Caught unknown error';\n  }\n\n  if (name && value) {\n    errorMessage += ` with ${name} ${prettyFormat(value, { min: true })}`;\n  }\n  return errorMessage;\n};\n\nexport const createQueryByError = (\n  error: NonNullable<unknown>,\n  callsite: Function\n): null => {\n  if (error instanceof Error) {\n    if (error.message.includes('No instances found')) {\n      return null;\n    }\n    throw new ErrorWithStack(error.message, callsite);\n  }\n\n  throw new ErrorWithStack(\n    // generic refining of `unknown` is very hard, you cannot do `'toString' in error` or anything like that\n    // Converting as any with extra safe optional chaining will do the job just as well\n    `Query: caught unknown error type: ${typeof error}, value: ${(error as any)?.toString?.()}`,\n    callsite\n  );\n};\n\nexport function copyStackTrace(target: unknown, stackTraceSource: Error) {\n  if (target instanceof Error && stackTraceSource.stack) {\n    target.stack = stackTraceSource.stack.replace(\n      stackTraceSource.message,\n      target.message\n    );\n  }\n}\n\nconst warned: { [functionName: string]: boolean } = {};\n\nexport function printDeprecationWarning(functionName: string) {\n  if (warned[functionName]) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`\n  Deprecation Warning:\n  Use of ${functionName} is not recommended and will be deleted in future versions of @testing-library/react-native.\n  `);\n\n  warned[functionName] = true;\n}\n\nexport function throwRemovedFunctionError(\n  functionName: string,\n  docsRef: string\n) {\n  throw new Error(\n    `\"${functionName}\" has been removed.\\n\\nPlease consult: https://callstack.github.io/react-native-testing-library/docs/${docsRef}`\n  );\n}\n\nexport function throwRenamedFunctionError(\n  functionName: string,\n  newFunctionName: string\n) {\n  throw new ErrorWithStack(\n    `The \"${functionName}\" function has been renamed to \"${newFunctionName}\". Please replace all occurrences.`,\n    throwRenamedFunctionError\n  );\n}\n"],"file":"errors.js"}