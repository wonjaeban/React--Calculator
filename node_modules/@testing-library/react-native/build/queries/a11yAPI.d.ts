import type { ReactTestInstance } from 'react-test-renderer';
import type { AccessibilityRole, AccessibilityState } from 'react-native';
import type { WaitForOptions } from '../waitFor';
import type { TextMatch } from '../matches';
declare type AccessibilityStateKey = keyof AccessibilityState;
declare type A11yValue = {
    min?: number;
    max?: number;
    now?: number;
    text?: string;
};
declare type GetReturn = ReactTestInstance;
declare type GetAllReturn = Array<ReactTestInstance>;
declare type QueryReturn = ReactTestInstance | null;
declare type QueryAllReturn = Array<ReactTestInstance>;
declare type FindReturn = Promise<GetReturn>;
declare type FindAllReturn = Promise<GetAllReturn>;
export declare type A11yAPI = {
    getByLabelText: (label: TextMatch) => GetReturn;
    getAllByLabelText: (label: TextMatch) => GetAllReturn;
    queryByLabelText: (label: TextMatch) => QueryReturn;
    queryAllByLabelText: (label: TextMatch) => QueryAllReturn;
    findByLabelText: (label: TextMatch, waitForOptions?: WaitForOptions) => FindReturn;
    findAllByLabelText: (label: TextMatch, waitForOptions?: WaitForOptions) => FindAllReturn;
    getByA11yHint: (a11yHint: TextMatch) => GetReturn;
    getByHintText: (a11yHint: TextMatch) => GetReturn;
    getAllByA11yHint: (a11yHint: TextMatch) => GetAllReturn;
    getAllByHintText: (a11yHint: TextMatch) => GetAllReturn;
    queryByA11yHint: (a11yHint: TextMatch) => QueryReturn;
    queryByHintText: (a11yHint: TextMatch) => QueryReturn;
    queryAllByA11yHint: (a11yHint: TextMatch) => QueryAllReturn;
    queryAllByHintText: (a11yHint: TextMatch) => QueryAllReturn;
    findByA11yHint: (a11yHint: TextMatch, waitForOptions?: WaitForOptions) => FindReturn;
    findByHintText: (a11yHint: TextMatch, waitForOptions?: WaitForOptions) => FindReturn;
    findAllByA11yHint: (a11yHint: TextMatch, waitForOptions?: WaitForOptions) => FindAllReturn;
    findAllByHintText: (a11yHint: TextMatch, waitForOptions?: WaitForOptions) => FindAllReturn;
    getByRole: (role: AccessibilityRole | RegExp) => GetReturn;
    getAllByRole: (role: AccessibilityRole | RegExp) => GetAllReturn;
    queryByRole: (role: AccessibilityRole | RegExp) => QueryReturn;
    queryAllByRole: (role: AccessibilityRole | RegExp) => QueryAllReturn;
    findByRole: (role: AccessibilityRole, waitForOptions?: WaitForOptions) => FindReturn;
    findAllByRole: (role: AccessibilityRole, waitForOptions?: WaitForOptions) => FindAllReturn;
    getByA11yStates: (accessibilityStateKey: AccessibilityStateKey | Array<AccessibilityStateKey>) => GetReturn;
    getAllByA11yStates: (accessibilityStateKey: AccessibilityStateKey | Array<AccessibilityStateKey>) => GetAllReturn;
    queryByA11yStates: (accessibilityStateKey: AccessibilityStateKey | Array<AccessibilityStateKey>) => QueryReturn;
    queryAllByA11yStates: (accessibilityStateKey: AccessibilityStateKey | Array<AccessibilityStateKey>) => QueryAllReturn;
    findByA11yStates: (accessibilityStateKey: AccessibilityStateKey, waitForOptions?: WaitForOptions) => FindReturn;
    findAllByA11yStates: (accessibilityStateKey: AccessibilityStateKey, waitForOptions?: WaitForOptions) => FindAllReturn;
    getByA11yState: (accessibilityState: AccessibilityState) => GetReturn;
    getAllByA11yState: (accessibilityState: AccessibilityState) => GetAllReturn;
    queryByA11yState: (accessibilityState: AccessibilityState) => QueryReturn;
    queryAllByA11yState: (accessibilityState: AccessibilityState) => QueryAllReturn;
    findByA11yState: (accessibilityState: AccessibilityState, waitForOptions?: WaitForOptions) => FindReturn;
    findAllByA11yState: (accessibilityState: AccessibilityState, waitForOptions?: WaitForOptions) => FindAllReturn;
    getByA11yValue: (a11yValue: A11yValue) => GetReturn;
    getAllByA11yValue: (a11yValue: A11yValue) => GetAllReturn;
    queryByA11yValue: (a11yValue: A11yValue) => QueryReturn;
    queryAllByA11yValue: (a11yValue: A11yValue) => QueryAllReturn;
    findByA11yValue: (a11yValue: A11yValue, waitForOptions?: WaitForOptions) => FindReturn;
    findAllByA11yValue: (a11yValue: A11yValue, waitForOptions?: WaitForOptions) => FindAllReturn;
};
export declare function matchStringValue(prop: string | undefined, matcher: TextMatch): boolean;
export declare function matchArrayValue(prop: Array<string> | undefined, matcher: string | Array<string>): boolean;
export declare function matchObject<T extends Record<string, unknown>>(prop: T | undefined, matcher: T): boolean;
export declare const a11yAPI: (instance: ReactTestInstance) => A11yAPI;
export {};
