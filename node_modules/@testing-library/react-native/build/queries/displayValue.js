"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByDisplayValueQueries = void 0;

var _errors = require("../helpers/errors");

var _filterNodeByType = require("../helpers/filterNodeByType");

var _matches = require("../matches");

var _makeQueries = require("./makeQueries");

const getTextInputNodeByDisplayValue = (node, value, options = {}) => {
  try {
    const {
      TextInput
    } = require('react-native');

    const {
      exact,
      normalizer
    } = options;
    const nodeValue = node.props.value !== undefined ? node.props.value : node.props.defaultValue;
    return (0, _filterNodeByType.filterNodeByType)(node, TextInput) && (0, _matches.matches)(value, nodeValue, normalizer, exact);
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

const queryAllByDisplayValue = instance => function queryAllByDisplayValueFn(displayValue, queryOptions) {
  return instance.findAll(node => getTextInputNodeByDisplayValue(node, displayValue, queryOptions));
};

const getMultipleError = displayValue => `Found multiple elements with display value: ${String(displayValue)} `;

const getMissingError = displayValue => `Unable to find an element with displayValue: ${String(displayValue)}`;

const {
  getBy,
  getAllBy,
  queryBy,
  queryAllBy,
  findBy,
  findAllBy
} = (0, _makeQueries.makeQueries)(queryAllByDisplayValue, getMissingError, getMultipleError);

const bindByDisplayValueQueries = instance => ({
  getByDisplayValue: getBy(instance),
  getAllByDisplayValue: getAllBy(instance),
  queryByDisplayValue: queryBy(instance),
  queryAllByDisplayValue: queryAllBy(instance),
  findByDisplayValue: findBy(instance),
  findAllByDisplayValue: findAllBy(instance)
});

exports.bindByDisplayValueQueries = bindByDisplayValueQueries;
//# sourceMappingURL=displayValue.js.map