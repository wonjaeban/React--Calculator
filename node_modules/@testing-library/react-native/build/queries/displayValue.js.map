{"version":3,"sources":["../../src/queries/displayValue.ts"],"names":["getTextInputNodeByDisplayValue","node","value","options","TextInput","require","exact","normalizer","nodeValue","props","undefined","defaultValue","error","queryAllByDisplayValue","instance","queryAllByDisplayValueFn","displayValue","queryOptions","findAll","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByDisplayValueQueries","getByDisplayValue","getAllByDisplayValue","queryByDisplayValue","findByDisplayValue","findAllByDisplayValue"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAWA,MAAMA,8BAA8B,GAAG,CACrCC,IADqC,EAErCC,KAFqC,EAGrCC,OAAyB,GAAG,EAHS,KAIlC;AACH,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAgBC,OAAO,CAAC,cAAD,CAA7B;;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAwBJ,OAA9B;AACA,UAAMK,SAAS,GACbP,IAAI,CAACQ,KAAL,CAAWP,KAAX,KAAqBQ,SAArB,GACIT,IAAI,CAACQ,KAAL,CAAWP,KADf,GAEID,IAAI,CAACQ,KAAL,CAAWE,YAHjB;AAIA,WACE,wCAAiBV,IAAjB,EAAuBG,SAAvB,KACA,sBAAQF,KAAR,EAAeM,SAAf,EAA0BD,UAA1B,EAAsCD,KAAtC,CAFF;AAID,GAXD,CAWE,OAAOM,KAAP,EAAc;AACd,UAAM,4CAA+BA,KAA/B,CAAN;AACD;AACF,CAnBD;;AAqBA,MAAMC,sBAAsB,GAC1BC,QAD6B,IAM7B,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,YAAhD,EAA8D;AAC5D,SAAOH,QAAQ,CAACI,OAAT,CAAkBjB,IAAD,IACtBD,8BAA8B,CAACC,IAAD,EAAOe,YAAP,EAAqBC,YAArB,CADzB,CAAP;AAGD,CAVH;;AAYA,MAAME,gBAAgB,GAAIH,YAAD,IACtB,+CAA8CI,MAAM,CAACJ,YAAD,CAAe,GADtE;;AAEA,MAAMK,eAAe,GAAIL,YAAD,IACrB,gDAA+CI,MAAM,CAACJ,YAAD,CAAe,EADvE;;AAGA,MAAM;AAAEM,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,UAA5B;AAAwCC,EAAAA,MAAxC;AAAgDC,EAAAA;AAAhD,IAA8D,8BAClEd,sBADkE,EAElEQ,eAFkE,EAGlEF,gBAHkE,CAApE;;AAeO,MAAMS,yBAAyB,GACpCd,QADuC,KAEZ;AAC3Be,EAAAA,iBAAiB,EAAEP,KAAK,CAACR,QAAD,CADG;AAE3BgB,EAAAA,oBAAoB,EAAEP,QAAQ,CAACT,QAAD,CAFH;AAG3BiB,EAAAA,mBAAmB,EAAEP,OAAO,CAACV,QAAD,CAHD;AAI3BD,EAAAA,sBAAsB,EAAEY,UAAU,CAACX,QAAD,CAJP;AAK3BkB,EAAAA,kBAAkB,EAAEN,MAAM,CAACZ,QAAD,CALC;AAM3BmB,EAAAA,qBAAqB,EAAEN,SAAS,CAACb,QAAD;AANL,CAFY,CAAlC","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { createLibraryNotSupportedError } from '../helpers/errors';\nimport { filterNodeByType } from '../helpers/filterNodeByType';\nimport { matches, TextMatch } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport type { TextMatchOptions } from './text';\n\nconst getTextInputNodeByDisplayValue = (\n  node: ReactTestInstance,\n  value: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  try {\n    const { TextInput } = require('react-native');\n    const { exact, normalizer } = options;\n    const nodeValue =\n      node.props.value !== undefined\n        ? node.props.value\n        : node.props.defaultValue;\n    return (\n      filterNodeByType(node, TextInput) &&\n      matches(value, nodeValue, normalizer, exact)\n    );\n  } catch (error) {\n    throw createLibraryNotSupportedError(error);\n  }\n};\n\nconst queryAllByDisplayValue = (\n  instance: ReactTestInstance\n): ((\n  displayValue: TextMatch,\n  queryOptions?: TextMatchOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByDisplayValueFn(displayValue, queryOptions) {\n    return instance.findAll((node) =>\n      getTextInputNodeByDisplayValue(node, displayValue, queryOptions)\n    );\n  };\n\nconst getMultipleError = (displayValue: TextMatch) =>\n  `Found multiple elements with display value: ${String(displayValue)} `;\nconst getMissingError = (displayValue: TextMatch) =>\n  `Unable to find an element with displayValue: ${String(displayValue)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByDisplayValue,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByDisplayValueQueries = {\n  getByDisplayValue: GetByQuery<TextMatch, TextMatchOptions>;\n  getAllByDisplayValue: GetAllByQuery<TextMatch, TextMatchOptions>;\n  queryByDisplayValue: QueryByQuery<TextMatch, TextMatchOptions>;\n  queryAllByDisplayValue: QueryAllByQuery<TextMatch, TextMatchOptions>;\n  findByDisplayValue: FindByQuery<TextMatch, TextMatchOptions>;\n  findAllByDisplayValue: FindAllByQuery<TextMatch, TextMatchOptions>;\n};\n\nexport const bindByDisplayValueQueries = (\n  instance: ReactTestInstance\n): ByDisplayValueQueries => ({\n  getByDisplayValue: getBy(instance),\n  getAllByDisplayValue: getAllBy(instance),\n  queryByDisplayValue: queryBy(instance),\n  queryAllByDisplayValue: queryAllBy(instance),\n  findByDisplayValue: findBy(instance),\n  findAllByDisplayValue: findAllBy(instance),\n});\n"],"file":"displayValue.js"}