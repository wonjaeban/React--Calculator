{"version":3,"sources":["../../src/queries/makeQueries.ts"],"names":["deprecatedKeys","extractDeprecatedWaitForOptionUsage","queryOptions","waitForOptions","timeout","interval","stackTraceError","forEach","key","option","console","warn","toString","makeQueries","queryAllByQuery","getMissingError","getMultipleError","getAllByQuery","instance","getAllFn","predicate","options","results","length","ErrorWithStack","queryByQuery","singleQueryFn","getByQuery","getFn","findAllByQuery","findAllFn","deprecatedWaitForOptions","findByQuery","findFn","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy"],"mappings":"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","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { ErrorWithStack } from '../helpers/errors';\nimport waitFor from '../waitFor';\nimport type { WaitForOptions } from '../waitFor';\n\nexport type GetByQuery<Predicate, Options> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance;\n\nexport type GetAllByQuery<Predicate, Options> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance[];\n\nexport type QueryByQuery<Predicate, Options> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance | null;\n\nexport type QueryAllByQuery<Predicate, Options> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance[];\n\nexport type FindByQuery<Predicate, Options> = (\n  predicate: Predicate,\n  options?: Options & WaitForOptions,\n  waitForOptions?: WaitForOptions\n) => Promise<ReactTestInstance>;\n\nexport type FindAllByQuery<Predicate, Options> = (\n  predicate: Predicate,\n  options?: Options & WaitForOptions,\n  waitForOptions?: WaitForOptions\n) => Promise<ReactTestInstance[]>;\n\ntype UnboundQuery<Query> = (instance: ReactTestInstance) => Query;\n\nexport type UnboundQueries<Predicate, Options> = {\n  getBy: UnboundQuery<GetByQuery<Predicate, Options>>;\n  getAllBy: UnboundQuery<GetAllByQuery<Predicate, Options>>;\n  queryBy: UnboundQuery<QueryByQuery<Predicate, Options>>;\n  queryAllBy: UnboundQuery<QueryAllByQuery<Predicate, Options>>;\n  findBy: UnboundQuery<FindByQuery<Predicate, Options>>;\n  findAllBy: UnboundQuery<FindAllByQuery<Predicate, Options>>;\n};\n\n// The WaitForOptions has been moved to the second option param of findBy* methods with the adding of TextMatchOptions\n// To make the migration easier and avoid a breaking change, keep reading this options from the first param but warn\nconst deprecatedKeys: (keyof WaitForOptions)[] = [\n  'timeout',\n  'interval',\n  'stackTraceError',\n];\nconst extractDeprecatedWaitForOptionUsage = (queryOptions?: WaitForOptions) => {\n  if (queryOptions) {\n    const waitForOptions: WaitForOptions = {\n      timeout: queryOptions.timeout,\n      interval: queryOptions.interval,\n      stackTraceError: queryOptions.stackTraceError,\n    };\n    deprecatedKeys.forEach((key) => {\n      const option = queryOptions[key];\n      if (option) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Use of option \"${key}\" in a findBy* query's second parameter, TextMatchOptions, is deprecated. Please pass this option in the third, WaitForOptions, parameter. \nExample: \n\n  findByText(text, {}, { ${key}: ${option.toString()} })`\n        );\n      }\n    });\n    return waitForOptions;\n  }\n};\n\nexport function makeQueries<Predicate, Options>(\n  queryAllByQuery: UnboundQuery<QueryAllByQuery<Predicate, Options>>,\n  getMissingError: (predicate: Predicate) => string,\n  getMultipleError: (predicate: Predicate) => string\n): UnboundQueries<Predicate, Options> {\n  function getAllByQuery(instance: ReactTestInstance) {\n    return function getAllFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length === 0) {\n        throw new ErrorWithStack(getMissingError(predicate), getAllFn);\n      }\n\n      return results;\n    };\n  }\n\n  function queryByQuery(instance: ReactTestInstance) {\n    return function singleQueryFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(getMultipleError(predicate), singleQueryFn);\n      }\n\n      if (results.length === 0) {\n        return null;\n      }\n\n      return results[0];\n    };\n  }\n\n  function getByQuery(instance: ReactTestInstance) {\n    return function getFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(getMultipleError(predicate), getFn);\n      }\n\n      if (results.length === 0) {\n        throw new ErrorWithStack(getMissingError(predicate), getFn);\n      }\n\n      return results[0];\n    };\n  }\n\n  function findAllByQuery(instance: ReactTestInstance) {\n    return function findAllFn(\n      predicate: Predicate,\n      queryOptions?: Options & WaitForOptions,\n      waitForOptions: WaitForOptions = {}\n    ) {\n      const deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(\n        queryOptions\n      );\n      return waitFor(() => getAllByQuery(instance)(predicate, queryOptions), {\n        ...deprecatedWaitForOptions,\n        ...waitForOptions,\n      });\n    };\n  }\n\n  function findByQuery(instance: ReactTestInstance) {\n    return function findFn(\n      predicate: Predicate,\n      queryOptions?: Options & WaitForOptions,\n      waitForOptions: WaitForOptions = {}\n    ) {\n      const deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(\n        queryOptions\n      );\n      return waitFor(() => getByQuery(instance)(predicate, queryOptions), {\n        ...deprecatedWaitForOptions,\n        ...waitForOptions,\n      });\n    };\n  }\n\n  return {\n    getBy: getByQuery,\n    getAllBy: getAllByQuery,\n    queryBy: queryByQuery,\n    queryAllBy: queryAllByQuery,\n    findBy: findByQuery,\n    findAllBy: findAllByQuery,\n  };\n}\n"],"file":"makeQueries.js"}