"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByPlaceholderTextQueries = void 0;

var _errors = require("../helpers/errors");

var _filterNodeByType = require("../helpers/filterNodeByType");

var _matches = require("../matches");

var _makeQueries = require("./makeQueries");

const getTextInputNodeByPlaceholderText = (node, placeholder, options = {}) => {
  try {
    const {
      TextInput
    } = require('react-native');

    const {
      exact,
      normalizer
    } = options;
    return (0, _filterNodeByType.filterNodeByType)(node, TextInput) && (0, _matches.matches)(placeholder, node.props.placeholder, normalizer, exact);
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

const queryAllByPlaceholderText = instance => function queryAllByPlaceholderFn(placeholder, queryOptions) {
  return instance.findAll(node => getTextInputNodeByPlaceholderText(node, placeholder, queryOptions));
};

const getMultipleError = placeholder => `Found multiple elements with placeholder: ${String(placeholder)} `;

const getMissingError = placeholder => `Unable to find an element with placeholder: ${String(placeholder)}`;

const {
  getBy,
  getAllBy,
  queryBy,
  queryAllBy,
  findBy,
  findAllBy
} = (0, _makeQueries.makeQueries)(queryAllByPlaceholderText, getMissingError, getMultipleError);

const bindByPlaceholderTextQueries = instance => ({
  getByPlaceholderText: getBy(instance),
  getAllByPlaceholderText: getAllBy(instance),
  queryByPlaceholderText: queryBy(instance),
  queryAllByPlaceholderText: queryAllBy(instance),
  findByPlaceholderText: findBy(instance),
  findAllByPlaceholderText: findAllBy(instance)
});

exports.bindByPlaceholderTextQueries = bindByPlaceholderTextQueries;
//# sourceMappingURL=placeholderText.js.map