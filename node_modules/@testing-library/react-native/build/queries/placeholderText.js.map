{"version":3,"sources":["../../src/queries/placeholderText.ts"],"names":["getTextInputNodeByPlaceholderText","node","placeholder","options","TextInput","require","exact","normalizer","props","error","queryAllByPlaceholderText","instance","queryAllByPlaceholderFn","queryOptions","findAll","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByPlaceholderTextQueries","getByPlaceholderText","getAllByPlaceholderText","queryByPlaceholderText","findByPlaceholderText","findAllByPlaceholderText"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAWA,MAAMA,iCAAiC,GAAG,CACxCC,IADwC,EAExCC,WAFwC,EAGxCC,OAAyB,GAAG,EAHY,KAIrC;AACH,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAgBC,OAAO,CAAC,cAAD,CAA7B;;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAwBJ,OAA9B;AACA,WACE,wCAAiBF,IAAjB,EAAuBG,SAAvB,KACA,sBAAQF,WAAR,EAAqBD,IAAI,CAACO,KAAL,CAAWN,WAAhC,EAA6CK,UAA7C,EAAyDD,KAAzD,CAFF;AAID,GAPD,CAOE,OAAOG,KAAP,EAAc;AACd,UAAM,4CAA+BA,KAA/B,CAAN;AACD;AACF,CAfD;;AAiBA,MAAMC,yBAAyB,GAC7BC,QADgC,IAMhC,SAASC,uBAAT,CAAiCV,WAAjC,EAA8CW,YAA9C,EAA4D;AAC1D,SAAOF,QAAQ,CAACG,OAAT,CAAkBb,IAAD,IACtBD,iCAAiC,CAACC,IAAD,EAAOC,WAAP,EAAoBW,YAApB,CAD5B,CAAP;AAGD,CAVH;;AAYA,MAAME,gBAAgB,GAAIb,WAAD,IACtB,6CAA4Cc,MAAM,CAACd,WAAD,CAAc,GADnE;;AAEA,MAAMe,eAAe,GAAIf,WAAD,IACrB,+CAA8Cc,MAAM,CAACd,WAAD,CAAc,EADrE;;AAGA,MAAM;AAAEgB,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,UAA5B;AAAwCC,EAAAA,MAAxC;AAAgDC,EAAAA;AAAhD,IAA8D,8BAClEb,yBADkE,EAElEO,eAFkE,EAGlEF,gBAHkE,CAApE;;AAeO,MAAMS,4BAA4B,GACvCb,QAD0C,KAEZ;AAC9Bc,EAAAA,oBAAoB,EAAEP,KAAK,CAACP,QAAD,CADG;AAE9Be,EAAAA,uBAAuB,EAAEP,QAAQ,CAACR,QAAD,CAFH;AAG9BgB,EAAAA,sBAAsB,EAAEP,OAAO,CAACT,QAAD,CAHD;AAI9BD,EAAAA,yBAAyB,EAAEW,UAAU,CAACV,QAAD,CAJP;AAK9BiB,EAAAA,qBAAqB,EAAEN,MAAM,CAACX,QAAD,CALC;AAM9BkB,EAAAA,wBAAwB,EAAEN,SAAS,CAACZ,QAAD;AANL,CAFY,CAArC","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { createLibraryNotSupportedError } from '../helpers/errors';\nimport { filterNodeByType } from '../helpers/filterNodeByType';\nimport { matches, TextMatch } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport type { TextMatchOptions } from './text';\n\nconst getTextInputNodeByPlaceholderText = (\n  node: ReactTestInstance,\n  placeholder: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  try {\n    const { TextInput } = require('react-native');\n    const { exact, normalizer } = options;\n    return (\n      filterNodeByType(node, TextInput) &&\n      matches(placeholder, node.props.placeholder, normalizer, exact)\n    );\n  } catch (error) {\n    throw createLibraryNotSupportedError(error);\n  }\n};\n\nconst queryAllByPlaceholderText = (\n  instance: ReactTestInstance\n): ((\n  placeholder: TextMatch,\n  queryOptions?: TextMatchOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByPlaceholderFn(placeholder, queryOptions) {\n    return instance.findAll((node) =>\n      getTextInputNodeByPlaceholderText(node, placeholder, queryOptions)\n    );\n  };\n\nconst getMultipleError = (placeholder: TextMatch) =>\n  `Found multiple elements with placeholder: ${String(placeholder)} `;\nconst getMissingError = (placeholder: TextMatch) =>\n  `Unable to find an element with placeholder: ${String(placeholder)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByPlaceholderText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByPlaceholderTextQueries = {\n  getByPlaceholderText: GetByQuery<TextMatch, TextMatchOptions>;\n  getAllByPlaceholderText: GetAllByQuery<TextMatch, TextMatchOptions>;\n  queryByPlaceholderText: QueryByQuery<TextMatch, TextMatchOptions>;\n  queryAllByPlaceholderText: QueryAllByQuery<TextMatch, TextMatchOptions>;\n  findByPlaceholderText: FindByQuery<TextMatch, TextMatchOptions>;\n  findAllByPlaceholderText: FindAllByQuery<TextMatch, TextMatchOptions>;\n};\n\nexport const bindByPlaceholderTextQueries = (\n  instance: ReactTestInstance\n): ByPlaceholderTextQueries => ({\n  getByPlaceholderText: getBy(instance),\n  getAllByPlaceholderText: getAllBy(instance),\n  queryByPlaceholderText: queryBy(instance),\n  queryAllByPlaceholderText: queryAllBy(instance),\n  findByPlaceholderText: findBy(instance),\n  findAllByPlaceholderText: findAllBy(instance),\n});\n"],"file":"placeholderText.js"}