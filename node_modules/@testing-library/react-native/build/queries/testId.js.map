{"version":3,"sources":["../../src/queries/testId.ts"],"names":["getNodeByTestId","node","testID","options","exact","normalizer","props","queryAllByTestId","instance","queryAllByTestIdFn","testId","queryOptions","results","findAll","filter","element","type","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByTestIdQueries","getByTestId","getAllByTestId","queryByTestId","findByTestId","findAllByTestId"],"mappings":";;;;;;;AACA;;AACA;;AAWA,MAAMA,eAAe,GAAG,CACtBC,IADsB,EAEtBC,MAFsB,EAGtBC,OAAyB,GAAG,EAHN,KAInB;AACH,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAwBF,OAA9B;AACA,SAAO,sBAAQD,MAAR,EAAgBD,IAAI,CAACK,KAAL,CAAWJ,MAA3B,EAAmCG,UAAnC,EAA+CD,KAA/C,CAAP;AACD,CAPD;;AASA,MAAMG,gBAAgB,GACpBC,QADuB,IAMvB,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,YAApC,EAAkD;AAChD,QAAMC,OAAO,GAAGJ,QAAQ,CACrBK,OADa,CACJZ,IAAD,IAAUD,eAAe,CAACC,IAAD,EAAOS,MAAP,EAAeC,YAAf,CADpB,EAEbG,MAFa,CAELC,OAAD,IAAa,OAAOA,OAAO,CAACC,IAAf,KAAwB,QAF/B,CAAhB;AAIA,SAAOJ,OAAP;AACD,CAZH;;AAcA,MAAMK,gBAAgB,GAAIP,MAAD,IACtB,wCAAuCQ,MAAM,CAACR,MAAD,CAAS,EADzD;;AAEA,MAAMS,eAAe,GAAIT,MAAD,IACrB,0CAAyCQ,MAAM,CAACR,MAAD,CAAS,EAD3D;;AAGA,MAAM;AAAEU,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,UAA5B;AAAwCC,EAAAA,MAAxC;AAAgDC,EAAAA;AAAhD,IAA8D,8BAClElB,gBADkE,EAElEY,eAFkE,EAGlEF,gBAHkE,CAApE;;AAeO,MAAMS,mBAAmB,GAC9BlB,QADiC,KAEZ;AACrBmB,EAAAA,WAAW,EAAEP,KAAK,CAACZ,QAAD,CADG;AAErBoB,EAAAA,cAAc,EAAEP,QAAQ,CAACb,QAAD,CAFH;AAGrBqB,EAAAA,aAAa,EAAEP,OAAO,CAACd,QAAD,CAHD;AAIrBD,EAAAA,gBAAgB,EAAEgB,UAAU,CAACf,QAAD,CAJP;AAKrBsB,EAAAA,YAAY,EAAEN,MAAM,CAAChB,QAAD,CALC;AAMrBuB,EAAAA,eAAe,EAAEN,SAAS,CAACjB,QAAD;AANL,CAFY,CAA5B","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { matches, TextMatch } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport type { TextMatchOptions } from './text';\n\nconst getNodeByTestId = (\n  node: ReactTestInstance,\n  testID: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  const { exact, normalizer } = options;\n  return matches(testID, node.props.testID, normalizer, exact);\n};\n\nconst queryAllByTestId = (\n  instance: ReactTestInstance\n): ((\n  testId: TextMatch,\n  queryOptions?: TextMatchOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByTestIdFn(testId, queryOptions) {\n    const results = instance\n      .findAll((node) => getNodeByTestId(node, testId, queryOptions))\n      .filter((element) => typeof element.type === 'string');\n\n    return results;\n  };\n\nconst getMultipleError = (testId: TextMatch) =>\n  `Found multiple elements with testID: ${String(testId)}`;\nconst getMissingError = (testId: TextMatch) =>\n  `Unable to find an element with testID: ${String(testId)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByTestId,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByTestIdQueries = {\n  getByTestId: GetByQuery<TextMatch, TextMatchOptions>;\n  getAllByTestId: GetAllByQuery<TextMatch, TextMatchOptions>;\n  queryByTestId: QueryByQuery<TextMatch, TextMatchOptions>;\n  queryAllByTestId: QueryAllByQuery<TextMatch, TextMatchOptions>;\n  findByTestId: FindByQuery<TextMatch, TextMatchOptions>;\n  findAllByTestId: FindAllByQuery<TextMatch, TextMatchOptions>;\n};\n\nexport const bindByTestIdQueries = (\n  instance: ReactTestInstance\n): ByTestIdQueries => ({\n  getByTestId: getBy(instance),\n  getAllByTestId: getAllBy(instance),\n  queryByTestId: queryBy(instance),\n  queryAllByTestId: queryAllBy(instance),\n  findByTestId: findBy(instance),\n  findAllByTestId: findAllBy(instance),\n});\n"],"file":"testId.js"}