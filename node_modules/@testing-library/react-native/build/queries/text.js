"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByTextQueries = void 0;

var React = _interopRequireWildcard(require("react"));

var _errors = require("../helpers/errors");

var _filterNodeByType = require("../helpers/filterNodeByType");

var _matches = require("../matches");

var _makeQueries = require("./makeQueries");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getChildrenAsText = (children, TextComponent) => {
  const textContent = [];
  React.Children.forEach(children, child => {
    var _child$props;

    if (typeof child === 'string') {
      textContent.push(child);
      return;
    }

    if (typeof child === 'number') {
      textContent.push(child.toString());
      return;
    }

    if (child !== null && child !== void 0 && (_child$props = child.props) !== null && _child$props !== void 0 && _child$props.children) {
      // Bail on traversing text children down the tree if current node (child)
      // has no text. In such situations, react-test-renderer will traverse down
      // this tree in a separate call and run this query again. As a result, the
      // query will match the deepest text node that matches requested text.
      if ((0, _filterNodeByType.filterNodeByType)(child, TextComponent)) {
        return;
      }

      if ((0, _filterNodeByType.filterNodeByType)(child, React.Fragment)) {
        textContent.push(...getChildrenAsText(child.props.children, TextComponent));
      }
    }
  });
  return textContent;
};

const getNodeByText = (node, text, options = {}) => {
  try {
    const {
      Text
    } = require('react-native');

    const isTextComponent = (0, _filterNodeByType.filterNodeByType)(node, Text);

    if (isTextComponent) {
      const textChildren = getChildrenAsText(node.props.children, Text);

      if (textChildren) {
        const textToTest = textChildren.join('');
        const {
          exact,
          normalizer
        } = options;
        return (0, _matches.matches)(text, textToTest, normalizer, exact);
      }
    }

    return false;
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

const queryAllByText = instance => function queryAllByTextFn(text, options) {
  const results = instance.findAll(node => getNodeByText(node, text, options));
  return results;
};

const getMultipleError = text => `Found multiple elements with text: ${String(text)}`;

const getMissingError = text => `Unable to find an element with text: ${String(text)}`;

const {
  getBy,
  getAllBy,
  queryBy,
  queryAllBy,
  findBy,
  findAllBy
} = (0, _makeQueries.makeQueries)(queryAllByText, getMissingError, getMultipleError);

const bindByTextQueries = instance => ({
  getByText: getBy(instance),
  getAllByText: getAllBy(instance),
  queryByText: queryBy(instance),
  queryAllByText: queryAllBy(instance),
  findByText: findBy(instance),
  findAllByText: findAllBy(instance)
});

exports.bindByTextQueries = bindByTextQueries;
//# sourceMappingURL=text.js.map