{"version":3,"sources":["../../src/queries/unsafeType.ts"],"names":["UNSAFE_getByType","instance","getByTypeFn","type","findByType","error","ErrorWithStack","UNSAFE_getAllByType","getAllByTypeFn","results","findAllByType","length","UNSAFE_queryByType","queryByTypeFn","UNSAFE_queryAllByType","bindUnsafeByTypeQueries"],"mappings":";;;;;;;AAEA;;AAGA,MAAMA,gBAAgB,GACpBC,QADuB,IAGvB,SAASC,WAAT,CAAqBC,IAArB,EAAqD;AACnD,MAAI;AACF,WAAOF,QAAQ,CAACG,UAAT,CAAoBD,IAApB,CAAP;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,sBAAJ,CAAmB,iCAAoBD,KAApB,CAAnB,EAA+CH,WAA/C,CAAN;AACD;AACF,CATH;;AAWA,MAAMK,mBAAmB,GACvBN,QAD0B,IAG1B,SAASO,cAAT,CAAwBL,IAAxB,EAAwD;AACtD,QAAMM,OAAO,GAAGR,QAAQ,CAACS,aAAT,CAAuBP,IAAvB,CAAhB;;AACA,MAAIM,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIL,sBAAJ,CAAmB,oBAAnB,EAAyCE,cAAzC,CAAN;AACD;;AACD,SAAOC,OAAP;AACD,CATH;;AAWA,MAAMG,kBAAkB,GACtBX,QADyB,IAGzB,SAASY,aAAT,CAAuBV,IAAvB,EAAuD;AACrD,MAAI;AACF,WAAOH,gBAAgB,CAACC,QAAD,CAAhB,CAA2BE,IAA3B,CAAP;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,WAAO,gCAAmBA,KAAnB,EAA0BQ,aAA1B,CAAP;AACD;AACF,CATH;;AAWA,MAAMC,qBAAqB,GACzBb,QAD4B,IAG5BE,IADmE,IAEhE;AACH,MAAI;AACF,WAAOI,mBAAmB,CAACN,QAAD,CAAnB,CAA8BE,IAA9B,CAAP;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,WAAO,EAAP;AACD;AACF,CAVD,C,CAYA;;;AAcA;AACO,MAAMU,uBAAuB,GAClCd,QADqC,KAEZ;AACzBD,EAAAA,gBAAgB,EAAEA,gBAAgB,CAACC,QAAD,CADT;AAEzBM,EAAAA,mBAAmB,EAAEA,mBAAmB,CAACN,QAAD,CAFf;AAGzBW,EAAAA,kBAAkB,EAAEA,kBAAkB,CAACX,QAAD,CAHb;AAIzBa,EAAAA,qBAAqB,EAAEA,qBAAqB,CAACb,QAAD;AAJnB,CAFY,CAAhC","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport * as React from 'react';\nimport { ErrorWithStack, prepareErrorMessage } from '../helpers/errors';\nimport { createQueryByError } from '../helpers/errors';\n\nconst UNSAFE_getByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => ReactTestInstance) =>\n  function getByTypeFn(type: React.ComponentType<any>) {\n    try {\n      return instance.findByType(type);\n    } catch (error) {\n      throw new ErrorWithStack(prepareErrorMessage(error), getByTypeFn);\n    }\n  };\n\nconst UNSAFE_getAllByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => Array<ReactTestInstance>) =>\n  function getAllByTypeFn(type: React.ComponentType<any>) {\n    const results = instance.findAllByType(type);\n    if (results.length === 0) {\n      throw new ErrorWithStack('No instances found', getAllByTypeFn);\n    }\n    return results;\n  };\n\nconst UNSAFE_queryByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => ReactTestInstance | null) =>\n  function queryByTypeFn(type: React.ComponentType<any>) {\n    try {\n      return UNSAFE_getByType(instance)(type);\n    } catch (error) {\n      return createQueryByError(error, queryByTypeFn);\n    }\n  };\n\nconst UNSAFE_queryAllByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => Array<ReactTestInstance>) => (\n  type: React.ComponentType<any>\n) => {\n  try {\n    return UNSAFE_getAllByType(instance)(type);\n  } catch (error) {\n    return [];\n  }\n};\n\n// Unsafe aliases\nexport type UnsafeByTypeQueries = {\n  UNSAFE_getByType: <P>(type: React.ComponentType<P>) => ReactTestInstance;\n  UNSAFE_getAllByType: <P>(\n    type: React.ComponentType<P>\n  ) => Array<ReactTestInstance>;\n  UNSAFE_queryByType: <P>(\n    type: React.ComponentType<P>\n  ) => ReactTestInstance | null;\n  UNSAFE_queryAllByType: <P>(\n    type: React.ComponentType<P>\n  ) => Array<ReactTestInstance>;\n};\n\n// TODO: migrate to makeQueries pattern\nexport const bindUnsafeByTypeQueries = (\n  instance: ReactTestInstance\n): UnsafeByTypeQueries => ({\n  UNSAFE_getByType: UNSAFE_getByType(instance),\n  UNSAFE_getAllByType: UNSAFE_getAllByType(instance),\n  UNSAFE_queryByType: UNSAFE_queryByType(instance),\n  UNSAFE_queryAllByType: UNSAFE_queryAllByType(instance),\n});\n"],"file":"unsafeType.js"}