import TestRenderer from 'react-test-renderer';
import * as React from 'react';
declare type Options = {
    wrapper?: React.ComponentType<any>;
    createNodeMock?: (element: React.ReactElement) => any;
};
export declare type RenderResult = ReturnType<typeof render>;
/**
 * Renders test component deeply using react-test-renderer and exposes helpers
 * to assert on the output.
 */
export default function render<T>(component: React.ReactElement<T>, { wrapper: Wrapper, createNodeMock }?: Options): {
    update: (component: React.ReactElement<any, string | React.JSXElementConstructor<any>>) => void;
    unmount: () => void;
    container: TestRenderer.ReactTestInstance;
    rerender: (component: React.ReactElement<any, string | React.JSXElementConstructor<any>>) => void;
    toJSON: () => TestRenderer.ReactTestRendererJSON | TestRenderer.ReactTestRendererJSON[] | null;
    debug: DebugFunction;
    getByLabelText: (label: import("./matches").TextMatch) => TestRenderer.ReactTestInstance;
    getAllByLabelText: (label: import("./matches").TextMatch) => TestRenderer.ReactTestInstance[];
    queryByLabelText: (label: import("./matches").TextMatch) => TestRenderer.ReactTestInstance | null;
    queryAllByLabelText: (label: import("./matches").TextMatch) => TestRenderer.ReactTestInstance[];
    findByLabelText: (label: import("./matches").TextMatch, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance>;
    findAllByLabelText: (label: import("./matches").TextMatch, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance[]>;
    getByA11yHint: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance;
    getByHintText: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance;
    getAllByA11yHint: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance[];
    getAllByHintText: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance[];
    queryByA11yHint: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance | null;
    queryByHintText: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance | null;
    queryAllByA11yHint: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance[];
    queryAllByHintText: (a11yHint: import("./matches").TextMatch) => TestRenderer.ReactTestInstance[];
    findByA11yHint: (a11yHint: import("./matches").TextMatch, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance>;
    findByHintText: (a11yHint: import("./matches").TextMatch, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance>;
    findAllByA11yHint: (a11yHint: import("./matches").TextMatch, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance[]>;
    findAllByHintText: (a11yHint: import("./matches").TextMatch, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance[]>;
    getByRole: (role: RegExp | import("react-native").AccessibilityRole) => TestRenderer.ReactTestInstance;
    getAllByRole: (role: RegExp | import("react-native").AccessibilityRole) => TestRenderer.ReactTestInstance[];
    queryByRole: (role: RegExp | import("react-native").AccessibilityRole) => TestRenderer.ReactTestInstance | null;
    queryAllByRole: (role: RegExp | import("react-native").AccessibilityRole) => TestRenderer.ReactTestInstance[];
    findByRole: (role: import("react-native").AccessibilityRole, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance>;
    findAllByRole: (role: import("react-native").AccessibilityRole, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance[]>;
    getByA11yStates: (accessibilityStateKey: keyof import("react-native").AccessibilityState | (keyof import("react-native").AccessibilityState)[]) => TestRenderer.ReactTestInstance;
    getAllByA11yStates: (accessibilityStateKey: keyof import("react-native").AccessibilityState | (keyof import("react-native").AccessibilityState)[]) => TestRenderer.ReactTestInstance[];
    queryByA11yStates: (accessibilityStateKey: keyof import("react-native").AccessibilityState | (keyof import("react-native").AccessibilityState)[]) => TestRenderer.ReactTestInstance | null;
    queryAllByA11yStates: (accessibilityStateKey: keyof import("react-native").AccessibilityState | (keyof import("react-native").AccessibilityState)[]) => TestRenderer.ReactTestInstance[];
    findByA11yStates: (accessibilityStateKey: keyof import("react-native").AccessibilityState, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance>;
    findAllByA11yStates: (accessibilityStateKey: keyof import("react-native").AccessibilityState, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance[]>;
    getByA11yState: (accessibilityState: import("react-native").AccessibilityState) => TestRenderer.ReactTestInstance;
    getAllByA11yState: (accessibilityState: import("react-native").AccessibilityState) => TestRenderer.ReactTestInstance[];
    queryByA11yState: (accessibilityState: import("react-native").AccessibilityState) => TestRenderer.ReactTestInstance | null;
    queryAllByA11yState: (accessibilityState: import("react-native").AccessibilityState) => TestRenderer.ReactTestInstance[];
    findByA11yState: (accessibilityState: import("react-native").AccessibilityState, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance>;
    findAllByA11yState: (accessibilityState: import("react-native").AccessibilityState, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance[]>;
    getByA11yValue: (a11yValue: {
        min?: number | undefined;
        max?: number | undefined;
        now?: number | undefined;
        text?: string | undefined;
    }) => TestRenderer.ReactTestInstance;
    getAllByA11yValue: (a11yValue: {
        min?: number | undefined;
        max?: number | undefined;
        now?: number | undefined;
        text?: string | undefined;
    }) => TestRenderer.ReactTestInstance[];
    queryByA11yValue: (a11yValue: {
        min?: number | undefined;
        max?: number | undefined;
        now?: number | undefined;
        text?: string | undefined;
    }) => TestRenderer.ReactTestInstance | null;
    queryAllByA11yValue: (a11yValue: {
        min?: number | undefined;
        max?: number | undefined;
        now?: number | undefined;
        text?: string | undefined;
    }) => TestRenderer.ReactTestInstance[];
    findByA11yValue: (a11yValue: {
        min?: number | undefined;
        max?: number | undefined;
        now?: number | undefined;
        text?: string | undefined;
    }, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance>;
    findAllByA11yValue: (a11yValue: {
        min?: number | undefined;
        max?: number | undefined;
        now?: number | undefined;
        text?: string | undefined;
    }, waitForOptions?: import("./waitFor").WaitForOptions | undefined) => Promise<TestRenderer.ReactTestInstance[]>;
    UNSAFE_getByProps: (props: {
        [key: string]: any;
    }) => TestRenderer.ReactTestInstance;
    UNSAFE_getAllByProps: (props: {
        [key: string]: any;
    }) => TestRenderer.ReactTestInstance[];
    UNSAFE_queryByProps: (props: {
        [key: string]: any;
    }) => TestRenderer.ReactTestInstance | null;
    UNSAFE_queryAllByProps: (props: {
        [key: string]: any;
    }) => TestRenderer.ReactTestInstance[];
    UNSAFE_getByType: <P>(type: React.ComponentType<P>) => TestRenderer.ReactTestInstance;
    UNSAFE_getAllByType: <P_1>(type: React.ComponentType<P_1>) => TestRenderer.ReactTestInstance[];
    UNSAFE_queryByType: <P_2>(type: React.ComponentType<P_2>) => TestRenderer.ReactTestInstance | null;
    UNSAFE_queryAllByType: <P_3>(type: React.ComponentType<P_3>) => TestRenderer.ReactTestInstance[];
    getByPlaceholderText: import("./queries/makeQueries").GetByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    getAllByPlaceholderText: import("./queries/makeQueries").GetAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryByPlaceholderText: import("./queries/makeQueries").QueryByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryAllByPlaceholderText: import("./queries/makeQueries").QueryAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findByPlaceholderText: import("./queries/makeQueries").FindByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findAllByPlaceholderText: import("./queries/makeQueries").FindAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    getByDisplayValue: import("./queries/makeQueries").GetByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    getAllByDisplayValue: import("./queries/makeQueries").GetAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryByDisplayValue: import("./queries/makeQueries").QueryByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryAllByDisplayValue: import("./queries/makeQueries").QueryAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findByDisplayValue: import("./queries/makeQueries").FindByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findAllByDisplayValue: import("./queries/makeQueries").FindAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    getByTestId: import("./queries/makeQueries").GetByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    getAllByTestId: import("./queries/makeQueries").GetAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryByTestId: import("./queries/makeQueries").QueryByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryAllByTestId: import("./queries/makeQueries").QueryAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findByTestId: import("./queries/makeQueries").FindByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findAllByTestId: import("./queries/makeQueries").FindAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    getByText: import("./queries/makeQueries").GetByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    getAllByText: import("./queries/makeQueries").GetAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryByText: import("./queries/makeQueries").QueryByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    queryAllByText: import("./queries/makeQueries").QueryAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findByText: import("./queries/makeQueries").FindByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
    findAllByText: import("./queries/makeQueries").FindAllByQuery<import("./matches").TextMatch, import("./queries/text").TextMatchOptions>;
};
interface DebugFunction {
    (message?: string): void;
    shallow: (message?: string) => void;
}
export {};
