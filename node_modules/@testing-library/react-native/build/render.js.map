{"version":3,"sources":["../src/render.tsx"],"names":["render","component","wrapper","Wrapper","createNodeMock","wrap","innerElement","renderer","renderWithAct","undefined","update","updateWithAct","instance","root","unmount","result","container","rerender","toJSON","debug","options","TestRenderer","create","debugImpl","message","json","shallow"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAYA;AACA;AACA;AACA;AACe,SAASA,MAAT,CACbC,SADa,EAEb;AAAEC,EAAAA,OAAO,EAAEC,OAAX;AAAoBC,EAAAA;AAApB,IAAgD,EAFnC,EAGb;AACA,QAAMC,IAAI,GAAIC,YAAD,IACXH,OAAO,gBAAG,oBAAC,OAAD,QAAUG,YAAV,CAAH,GAAuCA,YADhD;;AAGA,QAAMC,QAAQ,GAAGC,aAAa,CAC5BH,IAAI,CAACJ,SAAD,CADwB,EAE5BG,cAAc,GAAG;AAAEA,IAAAA;AAAF,GAAH,GAAwBK,SAFV,CAA9B;AAIA,QAAMC,MAAM,GAAGC,aAAa,CAACJ,QAAD,EAAWF,IAAX,CAA5B;AACA,QAAMO,QAAQ,GAAGL,QAAQ,CAACM,IAA1B;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpB,sBAAI,MAAM;AACRP,MAAAA,QAAQ,CAACO,OAAT;AACD,KAFD;AAGD,GAJD;;AAMA,kCAAkBA,OAAlB;AAEA,QAAMC,MAAM,GAAG,EACb,GAAG,kCAAqBH,QAArB,CADU;AAEbF,IAAAA,MAFa;AAGbI,IAAAA,OAHa;AAIbE,IAAAA,SAAS,EAAEJ,QAJE;AAKbK,IAAAA,QAAQ,EAAEP,MALG;AAKK;AAClBQ,IAAAA,MAAM,EAAEX,QAAQ,CAACW,MANJ;AAObC,IAAAA,KAAK,EAAEA,KAAK,CAACP,QAAD,EAAWL,QAAX;AAPC,GAAf;AAUA,+BAAgBQ,MAAhB;AACA,SAAOA,MAAP;AACD;;AAED,SAASP,aAAT,CACEP,SADF,EAEEmB,OAFF,EAGqB;AACnB,MAAIb,QAAJ;AAEA,oBAAI,MAAM;AACRA,IAAAA,QAAQ,GAAGc,2BAAaC,MAAb,CAAoBrB,SAApB,EAA+BmB,OAA/B,CAAX;AACD,GAFD,EAHmB,CAOnB;;AACA,SAAOb,QAAP;AACD;;AAED,SAASI,aAAT,CACEJ,QADF,EAEEF,IAFF,EAGE;AACA,SAAO,UAAUJ,SAAV,EAAyC;AAC9C,sBAAI,MAAM;AACRM,MAAAA,QAAQ,CAACG,MAAT,CAAgBL,IAAI,CAACJ,SAAD,CAApB;AACD,KAFD;AAGD,GAJD;AAKD;;AAOD,SAASkB,KAAT,CACEP,QADF,EAEEL,QAFF,EAGiB;AACf,WAASgB,SAAT,CAAmBC,OAAnB,EAAqC;AACnC,UAAMC,IAAI,GAAGlB,QAAQ,CAACW,MAAT,EAAb;;AACA,QAAIO,IAAJ,EAAU;AACR,aAAO,wBAAUA,IAAV,EAAgBD,OAAhB,CAAP;AACD;AACF;;AACDD,EAAAA,SAAS,CAACG,OAAV,GAAqBF,OAAD,IAAsB,2BAAaZ,QAAb,EAAuBY,OAAvB,CAA1C;;AACA,SAAOD,SAAP;AACD","sourcesContent":["import TestRenderer from 'react-test-renderer';\nimport type { ReactTestInstance, ReactTestRenderer } from 'react-test-renderer';\nimport * as React from 'react';\nimport act from './act';\nimport { addToCleanupQueue } from './cleanup';\nimport debugShallow from './helpers/debugShallow';\nimport debugDeep from './helpers/debugDeep';\nimport { getQueriesForElement } from './within';\nimport { setRenderResult } from './screen';\n\ntype Options = {\n  wrapper?: React.ComponentType<any>;\n  createNodeMock?: (element: React.ReactElement) => any;\n};\ntype TestRendererOptions = {\n  createNodeMock: (element: React.ReactElement) => any;\n};\n\nexport type RenderResult = ReturnType<typeof render>;\n\n/**\n * Renders test component deeply using react-test-renderer and exposes helpers\n * to assert on the output.\n */\nexport default function render<T>(\n  component: React.ReactElement<T>,\n  { wrapper: Wrapper, createNodeMock }: Options = {}\n) {\n  const wrap = (innerElement: React.ReactElement) =>\n    Wrapper ? <Wrapper>{innerElement}</Wrapper> : innerElement;\n\n  const renderer = renderWithAct(\n    wrap(component),\n    createNodeMock ? { createNodeMock } : undefined\n  );\n  const update = updateWithAct(renderer, wrap);\n  const instance = renderer.root;\n  const unmount = () => {\n    act(() => {\n      renderer.unmount();\n    });\n  };\n\n  addToCleanupQueue(unmount);\n\n  const result = {\n    ...getQueriesForElement(instance),\n    update,\n    unmount,\n    container: instance,\n    rerender: update, // alias for `update`\n    toJSON: renderer.toJSON,\n    debug: debug(instance, renderer),\n  };\n\n  setRenderResult(result);\n  return result;\n}\n\nfunction renderWithAct(\n  component: React.ReactElement,\n  options?: TestRendererOptions\n): ReactTestRenderer {\n  let renderer: ReactTestRenderer;\n\n  act(() => {\n    renderer = TestRenderer.create(component, options);\n  });\n\n  // @ts-ignore act is sync, so renderer is always initialised here\n  return renderer;\n}\n\nfunction updateWithAct(\n  renderer: ReactTestRenderer,\n  wrap: (innerElement: React.ReactElement) => React.ReactElement\n) {\n  return function (component: React.ReactElement) {\n    act(() => {\n      renderer.update(wrap(component));\n    });\n  };\n}\n\ninterface DebugFunction {\n  (message?: string): void;\n  shallow: (message?: string) => void;\n}\n\nfunction debug(\n  instance: ReactTestInstance,\n  renderer: ReactTestRenderer\n): DebugFunction {\n  function debugImpl(message?: string) {\n    const json = renderer.toJSON();\n    if (json) {\n      return debugDeep(json, message);\n    }\n  }\n  debugImpl.shallow = (message?: string) => debugShallow(instance, message);\n  return debugImpl;\n}\n"],"file":"render.js"}