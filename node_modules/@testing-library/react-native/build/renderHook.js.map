{"version":3,"sources":["../src/renderHook.tsx"],"names":["renderHook","renderCallback","options","initialProps","wrapper","result","React","createRef","TestComponent","renderCallbackProps","renderResult","useEffect","current","rerender","baseRerender","unmount","rerenderCallbackProps"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAeO,SAASA,UAAT,CACLC,cADK,EAELC,OAFK,EAG4B;AACjC,QAAMC,YAAY,GAAGD,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEC,YAA9B;AACA,QAAMC,OAAO,GAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEE,OAAzB;;AAEA,QAAMC,MAA6C,gBAAGC,eAAMC,SAAN,EAAtD;;AAEA,WAASC,aAAT,CAAuB;AACrBC,IAAAA;AADqB,GAAvB,EAIG;AACD,UAAMC,YAAY,GAAGT,cAAc,CAACQ,mBAAD,CAAnC;;AAEAH,mBAAMK,SAAN,CAAgB,MAAM;AACpBN,MAAAA,MAAM,CAACO,OAAP,GAAiBF,YAAjB;AACD,KAFD;;AAIA,WAAO,IAAP;AACD;;AAED,QAAM;AAAEG,IAAAA,QAAQ,EAAEC,YAAZ;AAA0BC,IAAAA;AAA1B,MAAsC;AAAA;AAC1C;AACA,+BAAC,aAAD;AAAe,IAAA,mBAAmB,EAAEZ;AAApC,IAF0C,EAG1C;AAAEC,IAAAA;AAAF,GAH0C,CAA5C;;AAMA,WAASS,QAAT,CAAkBG,qBAAlB,EAAgD;AAC9C,WAAOF,YAAY,eACjB,6BAAC,aAAD;AAAe,MAAA,mBAAmB,EAAEE;AAApC,MADiB,CAAnB;AAGD,GA9BgC,CAgCjC;;;AACA,SAAO;AAAEX,IAAAA,MAAF;AAAUQ,IAAAA,QAAV;AAAoBE,IAAAA;AAApB,GAAP;AACD","sourcesContent":["import React from 'react';\nimport type { ComponentType } from 'react';\nimport render from './render';\n\ninterface RenderHookResult<Result, Props> {\n  rerender: (props: Props) => void;\n  result: { current: Result };\n  unmount: () => void;\n}\n\ntype RenderHookOptions<Props> = Props extends object | string | number | boolean\n  ? {\n      initialProps: Props;\n      wrapper?: ComponentType<any>;\n    }\n  : { wrapper?: ComponentType<any>; initialProps?: never } | undefined;\n\nexport function renderHook<Result, Props>(\n  renderCallback: (props: Props) => Result,\n  options?: RenderHookOptions<Props>\n): RenderHookResult<Result, Props> {\n  const initialProps = options?.initialProps;\n  const wrapper = options?.wrapper;\n\n  const result: React.MutableRefObject<Result | null> = React.createRef();\n\n  function TestComponent({\n    renderCallbackProps,\n  }: {\n    renderCallbackProps: Props;\n  }) {\n    const renderResult = renderCallback(renderCallbackProps);\n\n    React.useEffect(() => {\n      result.current = renderResult;\n    });\n\n    return null;\n  }\n\n  const { rerender: baseRerender, unmount } = render(\n    // @ts-expect-error since option can be undefined, initialProps can be undefined when it should'nt\n    <TestComponent renderCallbackProps={initialProps} />,\n    { wrapper }\n  );\n\n  function rerender(rerenderCallbackProps: Props) {\n    return baseRerender(\n      <TestComponent renderCallbackProps={rerenderCallbackProps} />\n    );\n  }\n\n  // @ts-expect-error result is ill typed because ref is initialized to null\n  return { result, rerender, unmount };\n}\n"],"file":"renderHook.js"}